
Keywords:

Operators:

PP = \+\+
MM = --
ARR = ->
LSH = <<
RSH = >>
LEQ = <=
REQ = >=
EQ = ==
NEQ = !=
AND = &&
OR = \|\|
ADD_ASSIGN = +=
SUB_ASSIGN = -=
MUL_ASSIGN = *=
DIV_ASSIGN = /=
MOD_ASSIGN = %=
LSH_ASSIGN = <<=
RSH_ASSIGN = >>=
AND_ASSIGN = &=
XOR_ASSIGN = ^=
OR_ASSIGN = |=

Ids/literals:

IDENTIFIER = [a-zA-Z_][a-zA-Z0-9_]*
INTEGER = [+-]?([0-9]+|0[0-7]+|0[bB][0-1]+|0[xX][a-fA-F0-9]+)
REAL = [+-]?([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([+-]?[eE][0-9]+)?
CHARACTER = '\\?.'
STRING = "\w"

EBNF grammar:

decls = decl* ;

decl = func_decl | var_decl ;

func_decl = type_decl IDENTIFIER '(' params ')' '{' stmts '}' ;
var_decl = type_decl IDENTIFIER ('=' expr0)? ';' ;

type_decl = base_type ;
base_type = CHAR | INT | FLOAT ;

params = (type_decl IDENTIFIER (',' type_decl IDENTIFIER)*)? ;

stmts = stmt* ;

stmt = decl
     | IF '(' expr0 ')' stmt
     | IF '(' expr0 ')' stmt ELSE stmt
     | WHILE '(' expr0 ')' stmt
     | RETURN expr0 ';'
     | expr0 ';'
     | '{' stmts '}' ;

expr0 = expr1 ('+' expr0)
      | expr1 ('-' expr0)
      | expr1 ;
expr1 = expr2 ('*' expr1)
      | expr2 ('/' expr1)
      | expr2 ;
expr2 = INTEGER | REAL | CHARACTER | STRING ;

Grammar transform to LL(1):
decls_opt = decl decls_opt
          | --EPS-- ;
decl = type_spec IDENTIFIER decl_tail
decl_tail = '(' params_opt ')' '{' stmts '}'
          | '=' expr0 ';'
          | ';' ;
type_spec = CHAR | INT | FLOAT ;
params_opt = params | --EPS-- ;
params = type_spec IDENTIFIER params_tail ;
params_tail = ',' type_spec IDENTIFIER params_tail
            | --EPS-- ;
stmts = stmt stmts
      | --EPS-- ;
stmt = decl
     | expr0 ';'
     | IF '(' expr0 ')' stmt else_tail
     | WHILE '(' expr0 ')' stmt
     | RETURN expr0 ';'
     | '{' stmts '}' ;
else_tail = ELSE stmt
          | --EPS-- ;
expr0 = expr1 expr0_tail
expr0_tail = '+' expr0
           | '-' expr0
           | --EPS-- ;
expr1 = expr2 expr1_tail
expr1_tail = '*' expr1
           | '/' expr1
           | --EPS-- ;
expr2 = IDENTIFIER
      | INTEGER
      | REAL
      | CHARACTER
      | '(' expr0 ')' ;
